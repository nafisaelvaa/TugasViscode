# -*- coding: utf-8 -*-
"""AnalisisViscode_NafisaElva

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z-HDjdgr34y_lVJTIKzAyhwUsuIv7o3f
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('sales_data.csv')
df.head()

#Mengubah tipe kolom Date menjadi Datetime
df['Order Date']= pd.to_datetime(df['Order Date'])
df['Ship Date']= pd.to_datetime(df['Ship Date'])
df.dtypes

#Membuat kolom tambahan untuk day, month, month_num
df['day']=df['Order Date'].dt.day_name()
df['month']=df['Order Date'].dt.month_name()
df['month_num']=df['Order Date'].dt.month
df['year']=df['Order Date'].dt.year
df['Ship Delay'] = df['Ship Date']-df['Order Date']
df['Ship Delay'] = df['Ship Delay'].dt.days
df['Sales_per_Quantity'] = df['Sales'] / df['Quantity']

df.head()

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
df['Sales_Normalized'] = scaler.fit_transform(df[['Sales']])
print("Data after normalizing 'Sales':")
df.head()

df.describe()

plt.figure(figsize=(10, 6))
sns.histplot(df['Sales'], bins=30)
plt.title('Sales Distribution')
plt.xlabel('Sales')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x=df['City'].head(5),
            y=df['Sales'].head(5),
            )
plt.title('Sales by City')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression

X = df[['Quantity', 'Sales_per_Quantity']]
y = df['Sales']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

plt.figure(figsize=(10, 6))
plt.scatter(X_test['Quantity'], y_test, color='blue', label='Actual')
plt.scatter(X_test['Quantity'], y_pred, color='red', label='Predicted')
plt.title('Actual vs Predicted Sales')
plt.xlabel('Quantity')
plt.ylabel('Sales')
plt.legend()
plt.show()